
1. В чому різниця SOAP and Rest ?
    Відповідь:
        - SOAP - протокол обміну повідомленнями, який використовує XML для передачі повідомлень
        - REST - архітектурний стиль, який використовує HTTP для передачі повідомлень

        - SOAP - має докуметований API (WSDL)
        - REST - не має докуметованого API (але може бути і повинна бути документація, наприклад, Swagger)

        - SOAP - підтримує тільки XML
        - REST - підтримує XML, JSON, HTML, тощо

2. Які основні частина REST ?
    Відповідь:
        - URL - адреса ресурсу
        - HTTP методи - GET, POST, PUT, DELETE, PATCH, тощо
        - Параметри - query, path, header, body (в GET параметри передаються через query, body не використовується)
        - Відповідь - статус код, заголовки, тіло відповіді

3. Як відбувається авторизація в REST ?
    Відповідь:
        - Basic - передається логін та пароль в заголовку Authorization
        - Bearer,JWT - передається токен в заголовку Authorization
        наприклад:
        .header("Authorization", "Bearer " + token)

4. Що таке токен ?
    Відповідь:
        - це унікальний ключ, який використовується для авторизації
        - токен може бути сесійним (зберігається на сервері) або токеном доступу (зберігається на клієнті)
        - токен може бути одноразовим (для одного запиту) або багаторазовим (для багатьох запитів)
        - він має кінцевий термін дії (час життя)

5. Що таке Swagger ?
    Відповідь:
        - це фреймворк, який дозволяє створювати документацію для REST API
        - документація створюється автоматично на основі анотацій в коді
        - документація доступна за посиланням /swagger-ui.html
6. Що таке DTO ?
    Відповідь:
        - Data Transfer Object
        - це клас, який містить дані для передачі між об'єктами
        - використовується для передачі даних між різними частинами програми (наприклад, між сервером і клієнтом)
        - дозволяє зменшити кількість запитів до бази даних

7. Як порівняти актуальний респонс АПІ та очикуваний , якщо багато полів?
    Відповідь:
        - використовувати бібліотеку AssertJ
        - використовувати метод isEqualToComparingFieldByFieldRecursively
        - вказати в методі очікуваний респонс та актуальний респонс
        - метод порівняє всі поля об'єктів рекурсивно
        - якщо поля різні, то викине AssertionError з деталями про різницю

8. Які варіанти перевірки body в RestAssured є ?
    Відповідь:
        - використовувати метод body
        - вказати в методі очікуваний респонс
        - метод порівняє тіло респонсу з очікуваним тілом
        - якщо тіла різні, то викине AssertionError з деталями про різницю
        наприклад: e json
        {
            "data": {
                "id": 2,
                "email": "eуе@reqres.in",
                "first_name": "Janet",
                "last_name": "Weaver",
                "avatar": "https://reqres.in/img/faces/2-image.jpg",
                "massive": ["element1"],
                "massive1": ["item1", "item2"]
                "inner": {
                    "inner1": "value1",
                    "inner2": "value2"
                }
         }
        Перевірка полів відповіді:
            .then()
            .body("data.id", equalTo(2))
            .body("data.email", equalTo("еуе@reqres.in"))
            .body("data.first_name", equalTo("Janet"))
            .body("data.last_name", equalTo("Weaver"))
            // everyitem - перевірка всіх елементів масиву
                .body("data.avatar", everyItem(notNullValue()));
            // containsInAnyOrder - перевірка наявності всіх елементів масиву
              .body("data.massive1", containsInAnyOrder("item2", "item1"));
            // contains - перевірка наявності всіх елементів масиву в заданому порядку
                .body("data.avatar", contains("2-image.jpg"));
            // hasSize - перевірка розміру масиву
                .body("data.massive", hasSize(1));
            // hasItem - перевірка наявності елемента в масиві
                .body("data.massive1", hasItem("item1"));
            // avatar - відпоавдає регулярному виразу
                .body("data.avatar", matchesPattern("https://.*.jpg"));
            // inner - перевірка вкладених полів
                .body("data.inner.inner1", equalTo("value1"));





